import math

# Define the board
board = [" " for _ in range(9)]

# Function to print the current board state
def print_board():
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print("| " + " | ".join(row) + " |")

# Function to check if a player has won
def check_winner(player):
    win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),  # Rows
                      (0, 3, 6), (1, 4, 7), (2, 5, 8),  # Columns
                      (0, 4, 8), (2, 4, 6)]             # Diagonals
    for condition in win_conditions:
        if board[condition[0]] == board[condition[1]] == board[condition[2]] == player:
            return True
    return False

# Function to check for a draw
def is_draw():
    return " " not in board

# Function to evaluate the board (1 for win, -1 for loss, 0 for draw)
def evaluate():
    if check_winner("X"):  # AI wins
        return 1
    elif check_winner("O"):  # Human wins
        return -1
    elif is_draw():  # Draw
        return 0
    return None  # Continue playing

# Minimax algorithm with Alpha-Beta Pruning
def minimax(depth, is_maximizing, alpha, beta):
    score = evaluate()

    if score is not None:  # Terminal state (win, lose, draw)
        return score

    if is_maximizing:  # AI's turn (MAX player)
        best_score = -math.inf
        for i in range(9):
            if board[i] == " ":
                board[i] = "X"
                best_score = max(best_score, minimax(depth + 1, False, alpha, beta))
                board[i] = " "
                alpha = max(alpha, best_score)
                if beta <= alpha:
                    break
        return best_score

    else:  # Human's turn (MIN player)
        best_score = math.inf
        for i in range(9):
            if board[i] == " ":
                board[i] = "O"
                best_score = min(best_score, minimax(depth + 1, True, alpha, beta))
                board[i] = " "
                beta = min(beta, best_score)
                if beta <= alpha:
                    break
        return best_score

# Function for the AI to make a move
def ai_move():
    best_score = -math.inf
    best_move = -1
    for i in range(9):
        if board[i] == " ":
            board[i] = "X"
            move_score = minimax(0, False, -math.inf, math.inf)
            board[i] = " "
            if move_score > best_score:
                best_score = move_score
                best_move = i

    board[best_move] = "X"

# Function for the human to make a move
def human_move():
    while True:
        move = input("Enter your move (1-9): ")
        try:
            move = int(move) - 1
            if 0 <= move <= 8 and board[move] == " ":
                board[move] = "O"
                break
            else:
                print("Invalid move. Try again.")
        except ValueError:
            print("Please enter a number between 1 and 9.")

# Main game loop
def play_game():
    print("Welcome to Tic-Tac-Toe!")
    print_board()

    while True:
        # Human's turn
        human_move()
        print_board()
        if check_winner("O"):
            print("You win!")
            break
        if is_draw():
            print("It's a draw!")
            break

        # AI's turn
        print("AI is making a move...")
        ai_move()
        print_board()
        if check_winner("X"):
            print("AI wins!")
            break
        if is_draw():
            print("It's a draw!")
            break

# Start the game
play_game()
